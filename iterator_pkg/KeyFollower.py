import numpy as npimport h5pyimport osimport timefrom multiprocessing import Process    class SwmrProcess(Process):    passclass Follower():    def __init__(self,                 hdf5_file,                 key_datasets,                 timeout = (10)):                     self.hdf5_file = hdf5_file                     self.current_key = -1                     self.current_max = -1                     self.timeout = timeout                     self.key_datasets = []                     for dset_path in key_datasets:                         self.key_datasets.append(self.hdf5_file[dset_path])                                                                               def __iter__(self):        return(self)        def __next__(self):        if not self.is_finished():                    x = self.current_key            self.current_key += 1            self._timer_reset()            return x                else:            raise StopIteration                    def reset(self):        self.current_key = -1        self.current_max = -1            def _timer_reset(self):        self.start_time = time.time()                                      #Returns the maximum readable key                def get_current_max(self):        current_max = []        for dataset in self.key_datasets:            dataset.refresh()            current_max += np.nonzero(dataset[...].flatten())[0].max()        return np.asarray(current_max).min()                    def _is_next(self):                #assign current max to a variable and only call the function current_max when needed                if self.current_key == self.current_max:            self.current_max = self.get_current_max()                if self.current_key < self.current_max:            return True        else:            return False                    def _timeout(self):        if time.time() > self.start_time + self.timeout:            return True        else:            return False                    def is_finished(self):        if (not self._is_next()) and (self._timeout()):        #if self.current_key == 2814:            return True                else:            return False                                                                                                                                                                                          filepath = "/Users/richardparke/Documents/Diamond/Iterator/tests/hdf5_tests/i18-81742.nxs"key_paths = ["entry/solstice_scan/keys/PANDABOX.h5"]f = h5py.File(filepath, "r")kf = Follower(f, key_paths)                                                     