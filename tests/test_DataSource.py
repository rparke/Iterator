import numpy as npimport h5pyimport pytestimport osimport iterator_pkgfrom iterator_pkg import DataSourcefrom iterator_pkg import KeyFollowerdef test_iterates_complete_dataset():                filepath = "hdf5_tests/complete_2"      key_paths = ["keys/2"]      data_paths = ['data/2']      with h5py.File(filepath, "r") as f:           df = DataSource.DataFollower(f, key_paths, data_paths, timeout = 1)           current_key = 0           for dset in df:               current_key+= 1      assert current_key == 10        def test_iterates_incomplete_dataset():                filepath = "hdf5_tests/incomplete_2"      key_paths = ["keys/incomplete"]      data_paths = ["data/incomplete"]      with h5py.File(filepath, "r") as f:           df = DataSource.DataFollower(f, key_paths, data_paths, timeout = 1)           current_key = 0           for dset in df:               current_key+= 1      assert current_key == 2      def test_iterates_multiple_incomplete_dataset():                filepath = "hdf5_tests/incomplete_2"      key_paths = ["keys/complete", "keys/incomplete"]      data_paths = ['data/full', "data/incomplete"]      with h5py.File(filepath, "r") as f:          #data = f[key_paths[0]][...]           df = DataSource.DataFollower(f, key_paths, data_paths, timeout = 1)           #kf._get_frame_shape()           current_key = 0           for dset in df:               current_key+= 1      assert current_key == 2            def test_correct_return_data_complete():      filepath = "hdf5_tests/complete_2"      key_paths = ["keys/2"]      data_paths = ['data/2']      with h5py.File(filepath, "r") as f:                      df = DataSource.DataFollower(f, key_paths, data_paths, timeout = 1)           full_dataset = np.array([])           for dset in df:               full_dataset = np.concatenate((full_dataset, dset[0]))           assert((f[data_paths[0]][...].flatten() == full_dataset).all())        def test_correct_return_single_data_incomplete():    passdef test_correct_return_multiple_data_incomplete():    pass        